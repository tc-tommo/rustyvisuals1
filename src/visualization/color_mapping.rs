use macroquad::color::Color;

//    int[] COLORTABLE = {0x000004, 0x010005, 0x010106, 0x010108, 0x02010a, 0x02020c, 0x02020e, 0x030210, 0x040312, 0x040314, 0x050417, 0x060419, 0x07051b, 0x08051d, 0x09061f, 0x0a0722, 0x0b0724, 0x0c0826, 0x0d0829, 0x0e092b, 0x10092d, 0x110a30, 0x120a32, 0x140b34, 0x150b37, 0x160b39, 0x180c3c, 0x190c3e, 0x1b0c41, 0x1c0c43, 0x1e0c45, 0x1f0c48, 0x210c4a, 0x230c4c, 0x240c4f, 0x260c51, 0x280b53, 0x290b55, 0x2b0b57, 0x2d0b59, 0x2f0a5b, 0x310a5c, 0x320a5e, 0x340a5f, 0x360961, 0x380962, 0x390963, 0x3b0964, 0x3d0965, 0x3e0966, 0x400a67, 0x420a68, 0x440a68, 0x450a69, 0x470b6a, 0x490b6a, 0x4a0c6b, 0x4c0c6b, 0x4d0d6c, 0x4f0d6c, 0x510e6c, 0x520e6d, 0x540f6d, 0x550f6d, 0x57106e, 0x59106e, 0x5a116e, 0x5c126e, 0x5d126e, 0x5f136e, 0x61136e, 0x62146e, 0x64156e, 0x65156e, 0x67166e, 0x69166e, 0x6a176e, 0x6c186e, 0x6d186e, 0x6f196e, 0x71196e, 0x721a6e, 0x741a6e, 0x751b6e, 0x771c6d, 0x781c6d, 0x7a1d6d, 0x7c1d6d, 0x7d1e6d, 0x7f1e6c, 0x801f6c, 0x82206c, 0x84206b, 0x85216b, 0x87216b, 0x88226a, 0x8a226a, 0x8c2369, 0x8d2369, 0x8f2469, 0x902568, 0x922568, 0x932667, 0x952667, 0x972766, 0x982766, 0x9a2865, 0x9b2964, 0x9d2964, 0x9f2a63, 0xa02a63, 0xa22b62, 0xa32c61, 0xa52c60, 0xa62d60, 0xa82e5f, 0xa92e5e, 0xab2f5e, 0xad305d, 0xae305c, 0xb0315b, 0xb1325a, 0xb3325a, 0xb43359, 0xb63458, 0xb73557, 0xb93556, 0xba3655, 0xbc3754, 0xbd3853, 0xbf3952, 0xc03a51, 0xc13a50, 0xc33b4f, 0xc43c4e, 0xc63d4d, 0xc73e4c, 0xc83f4b, 0xca404a, 0xcb4149, 0xcc4248, 0xce4347, 0xcf4446, 0xd04545, 0xd24644, 0xd34743, 0xd44842, 0xd54a41, 0xd74b3f, 0xd84c3e, 0xd94d3d, 0xda4e3c, 0xdb503b, 0xdd513a, 0xde5238, 0xdf5337, 0xe05536, 0xe15635, 0xe25734, 0xe35933, 0xe45a31, 0xe55c30, 0xe65d2f, 0xe75e2e, 0xe8602d, 0xe9612b, 0xea632a, 0xeb6429, 0xeb6628, 0xec6726, 0xed6925, 0xee6a24, 0xef6c23, 0xef6e21, 0xf06f20, 0xf1711f, 0xf1731d, 0xf2741c, 0xf3761b, 0xf37819, 0xf47918, 0xf57b17, 0xf57d15, 0xf67e14, 0xf68013, 0xf78212, 0xf78410, 0xf8850f, 0xf8870e, 0xf8890c, 0xf98b0b, 0xf98c0a, 0xf98e09, 0xfa9008, 0xfa9207, 0xfa9407, 0xfb9606, 0xfb9706, 0xfb9906, 0xfb9b06, 0xfb9d07, 0xfc9f07, 0xfca108, 0xfca309, 0xfca50a, 0xfca60c, 0xfca80d, 0xfcaa0f, 0xfcac11, 0xfcae12, 0xfcb014, 0xfcb216, 0xfcb418, 0xfbb61a, 0xfbb81d, 0xfbba1f, 0xfbbc21, 0xfbbe23, 0xfac026, 0xfac228, 0xfac42a, 0xfac62d, 0xf9c72f, 0xf9c932, 0xf9cb35, 0xf8cd37, 0xf8cf3a, 0xf7d13d, 0xf7d340, 0xf6d543, 0xf6d746, 0xf5d949, 0xf5db4c, 0xf4dd4f, 0xf4df53, 0xf4e156, 0xf3e35a, 0xf3e55d, 0xf2e661, 0xf2e865, 0xf2ea69, 0xf1ec6d, 0xf1ed71, 0xf1ef75, 0xf1f179, 0xf2f27d, 0xf2f482, 0xf3f586, 0xf3f68a, 0xf4f88e, 0xf5f992, 0xf6fa96, 0xf8fb9a, 0xf9fc9d, 0xfafda1, 0xfcffa4};

const COLOR_TABLE_HEX: &[u32] = &[
    0x000004, 0x010005, 0x010106, 0x010108, 0x02010a, 0x02020c, 0x02020e, 0x030210, 0x040312, 0x040314, 0x050417, 0x060419, 0x07051b, 0x08051d, 0x09061f, 0x0a0722, 0x0b0724, 0x0c0826, 0x0d0829, 0x0e092b, 0x10092d, 0x110a30, 0x120a32, 0x140b34, 0x150b37, 0x160b39, 0x180c3c, 0x190c3e, 0x1b0c41, 0x1c0c43, 0x1e0c45, 0x1f0c48, 0x210c4a, 0x230c4c, 0x240c4f, 0x260c51, 0x280b53, 0x290b55, 0x2b0b57, 0x2d0b59, 0x2f0a5b, 0x310a5c, 0x320a5e, 0x340a5f, 0x360961, 0x380962, 0x390963, 0x3b0964, 0x3d0965, 0x3e0966, 0x400a67, 0x420a68, 0x440a68, 0x450a69, 0x470b6a, 0x490b6a, 0x4a0c6b, 0x4c0c6b, 0x4d0d6c, 0x4f0d6c, 0x510e6c, 0x520e6d, 0x540f6d, 0x550f6d, 0x57106e, 0x59106e, 0x5a116e, 0x5c126e, 0x5d126e, 0x5f136e, 0x61136e, 0x62146e, 0x64156e, 0x65156e, 0x67166e, 0x69166e, 0x6a176e, 0x6c186e, 0x6d186e, 0x6f196e, 0x71196e, 0x721a6e, 0x741a6e, 0x751b6e, 0x771c6d, 0x781c6d, 0x7a1d6d, 0x7c1d6d, 0x7d1e6d, 0x7f1e6c, 0x801f6c, 0x82206c, 0x84206b, 0x85216b, 0x87216b, 0x88226a, 0x8a226a, 0x8c2369, 0x8d2369, 0x8f2469, 0x902568, 0x922568, 0x932667, 0x952667, 0x972766, 0x982766, 0x9a2865, 0x9b2964, 0x9d2964, 0x9f2a63, 0xa02a63, 0xa22b62, 0xa32c61, 0xa52c60, 0xa62d60, 0xa82e5f, 0xa92e5e, 0xab2f5e, 0xad305d, 0xae305c, 0xb0315b, 0xb1325a, 0xb3325a, 0xb43359, 0xb63458, 0xb73557, 0xb93556, 0xba3655, 0xbc3754, 0xbd3853, 0xbf3952, 0xc03a51, 0xc13a50, 0xc33b4f, 0xc43c4e, 0xc63d4d, 0xc73e4c, 0xc83f4b, 0xca404a, 0xcb4149, 0xcc4248, 0xce4347, 0xcf4446, 0xd04545, 0xd24644, 0xd34743, 0xd44842, 0xd54a41, 0xd74b3f, 0xd84c3e, 0xd94d3d, 0xda4e3c, 0xdb503b, 0xdd513a, 0xde5238, 0xdf5337, 0xe05536, 0xe15635, 0xe25734, 0xe35933, 0xe45a31, 0xe55c30, 0xe65d2f, 0xe75e2e, 0xe8602d, 0xe9612b, 0xea632a, 0xeb6429, 0xeb6628, 0xec6726, 0xed6925, 0xee6a24, 0xef6c23, 0xef6e21, 0xf06f20, 0xf1711f, 0xf1731d, 0xf2741c, 0xf3761b, 0xf37819, 0xf47918, 0xf57b17, 0xf57d15, 0xf67e14, 0xf68013, 0xf78212, 0xf78410, 0xf8850f, 0xf8870e, 0xf8890c, 0xf98b0b, 0xf98c0a, 0xf98e09, 0xfa9008, 0xfa9207, 0xfa9407, 0xfb9606, 0xfb9706, 0xfb9906, 0xfb9b06, 0xfb9d07, 0xfc9f07, 0xfca108, 0xfca309, 0xfca50a, 0xfca60c, 0xfca80d, 0xfcaa0f, 0xfcac11, 0xfcae12, 0xfcb014, 0xfcb216, 0xfcb418, 0xfbb61a, 0xfbb81d, 0xfbba1f, 0xfbbc21, 0xfbbe23, 0xfac026, 0xfac228, 0xfac42a, 0xfac62d, 0xf9c72f, 0xf9c932, 0xf9cb35, 0xf8cd37, 0xf8cf3a, 0xf7d13d, 0xf7d340, 0xf6d543, 0xf6d746, 0xf5d949, 0xf5db4c, 0xf4dd4f, 0xf4df53, 0xf4e156, 0xf3e35a, 0xf3e55d, 0xf2e661, 0xf2e865, 0xf2ea69, 0xf1ec6d, 0xf1ed71, 0xf1ef75, 0xf1f179, 0xf2f27d, 0xf2f482, 0xf3f586, 0xf3f68a, 0xf4f88e, 0xf5f992, 0xf6fa96, 0xf8fb9a, 0xf9fc9d, 0xfafda1, 0xfcffa4
];

pub struct ColorMapper {
    color_table: Vec<Color>,
}

impl ColorMapper {
    pub fn new() -> Self {
        // Convert hex values to Colors
        let color_table = COLOR_TABLE_HEX
            .iter()
            .map(|&hex| color_from_hex(hex))
            .collect();

        Self { color_table }
    }

    pub fn map_amplitude_to_color(&self, amplitude: f32) -> Color {
        let num_colors = self.color_table.len();
        let normalized_amplitude = amplitude.clamp(0.0, 1.0);
        let idx = (normalized_amplitude * (num_colors - 1) as f32).round() as usize;
        self.color_table[idx]
    }
}

fn color_from_hex(hex: u32) -> Color {
    let r = ((hex >> 16) & 0xFF) as u8;
    let g = ((hex >> 8) & 0xFF) as u8;
    let b = (hex & 0xFF) as u8;
    Color::from_rgba(r, g, b, 255)
}
